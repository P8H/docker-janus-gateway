; [stream-name]
; type = rtp|live|ondemand|rtsp
;        rtp = stream originated by an external tool (e.g., gstreamer or
;              ffmpeg) and sent to the plugin via RTP
;        live = local file streamed live to multiple listeners
;               (multiple listeners = same streaming context)
;        ondemand = local file streamed on-demand to a single listener
;                   (multiple listeners = different streaming contexts)
;        rtsp = stream originated by an external RTSP feed (only
;               available if libcurl support was compiled)
; id = <unique numeric ID> (if missing, a random one will be generated)
; description = This is my awesome stream
; is_private = yes|no (private streams don't appear when you do a 'list'
;			request)
; secret = <optional password needed for manipulating (e.g., destroying
;			or enabling/disabling) the stream>
; filename = path to the local file to stream (only for live/ondemand)
; audio = yes|no (do/don't stream audio)
; video = yes|no (do/don't stream video)
;    The following options are only valid for the 'rtp' type:
; audioport = local port for receiving audio frames
; audiomcast = multicast group port for receiving audio frames (only for rtp)
; audiocodec = <audio RTP payload type> (e.g., 111)
; audiortpmap = RTP map of the audio codec (e.g., opus/48000/2)
; videoport = local port for receiving video frames (only for rtp)
; videomcast = multicast group port for receiving video frames (only for rtp)
; videocodec = <video RTP payload type> (e.g., 100)
; videortpmap = RTP map of the video codec (e.g., VP8/90000)
; url = RTSP stream URL (only if type=rtsp)


;
; This is a sample configuration for an RTSP stream
; NOTE WELL: the plugin does NOT transcode, so the RTSP stream MUST be
; in a format the browser can digest (e.g., VP8 or H.264 for video)
;
[rtsp-test]
type = rtsp
id = 99
description = RTSP Test
audio = no
video = yes
url=rtsp://astream-2-1.p8h.cont.tutum.io:8051/live.webm
